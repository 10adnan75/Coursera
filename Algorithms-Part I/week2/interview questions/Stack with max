Question: Create a data structure that efficiently supports the stack operations (push and pop) and also a return-the-maximum operation. Assume the elements are real numbers so that you can compare them.

Answer: 
public class StackArray<E> {
private E[] stack;
private int N;

public StackArray() {
stack = (E[]) new Object[1];
N = 0;
}

public boolean isEmpty() {
return N == 0;
}

public int size() {
return N;
}

public void resize(int capacity) {
E[] newStack = (E[]) new Object[capacity];
for (int i = 0; i < N; i++) {
newStack[i] = stack[i];
}
stack = newStack;
}

public void push(E data) {
stack[N++] = data;
if (N == stack.length) resize(stack.length * 2);
}

public E pop() {
if (isEmpty()) throw new NullPointerException("Stack underflow!");
E data = stack[--N];
stack[N] = null;
if (N > 0 && N == stack.length / 4) resize(stack.length / 2);
return data;
}

public int getMax() {
if (isEmpty()) throw new NullPointerException("Stack underflow!");
int copySize = N, max = 0;
while (copySize-- > 0) {
if (stack[copySize] > max) max = stack[copySize];
}
return max;
}

public void display() {
if (isEmpty()) throw new NullPointerException("Stack underflow!");
int copySize = N;
while (copySize-- > 0) System.out.print(stack[copySize] + " ");
}

public static void main(String[] args) {
StackArray<Integer> stack = new StackArray<>();
int i = 0;
while (i++ < 10) stack.push(i);
for (; i > 5; i--) System.out.println(stack.pop());
stack.display();
System.out.println("\nStack size: " + stack.size());
}
}
