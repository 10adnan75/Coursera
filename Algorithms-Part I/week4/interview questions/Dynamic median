Question: Design a data type that supports insert in logarithmic time, find-the-median in constant time, and remove-the-median in logarithmic time. 
          If the number of keys in the data type is even, find/remove the lower median.
          
Answer: Maintain two binary heaps, one that is max-oriented and one that is min-oriented.
        
        Algorithm:
        class MedianFinder {
          private PriorityQueue<Integer> maxQ = new PriorityQueue<Integer>();
          PriorityQueue<Integer> minQ = new PriorityQueue<Integer>(new Comparator<Integer>() {
	                                                               @Override
	                                                               public int compare(Integer o1, Integer o2) {
	                                                                 return o2 - o1;
	                                                               }
                                                                 });
                                                                 
          public void addNum(int num) {
            if (minQ.size() == 0 || minQ.peek() >= num) {
              minQ.add(num);
            } else {
              maxQ.add(num);
            }
            if (maxQ.size() == minQ.size() + 1) {
              minQ.add(maxQ.poll());
            }
            if (maxQ.size() + 2 == minQ.size()) {
              maxQ.add(minQ.poll());
            }
          }
    
          public double findMedian() {
            return minQ.size() == maxQ.size() ? (minQ.peek() +maxQ.peek()) / 2.0 : minQ.peek();
      `   }
        }

